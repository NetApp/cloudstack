/*
 * ONTAP REST API
 * ONTAP adds support for an expansive RESTful API. The documentation below provides information about the types of API calls available to you, as well as details about using each API endpoint. You can learn more about the ONTAP REST API and ONTAP in the ONTAP 9 Documentation Center:  http://docs.netapp.com/ontap-9/topic/com.netapp.doc.dot-rest-api/home.html. NetApp welcomes your comments and suggestions about the ONTAP REST API and the documentation for its use.</br> **Using the ONTAP REST API online documentation** Each API method includes usage examples, as well as a model that displays all the required and optional properties supported by the method. Click the _Model_ link, available with each API method, to see all the required and optional properties supported by each method. 
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.apache.cloudstack.storage.feign.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * AggregateResponse
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
public class AggregateResponse {
  @JsonProperty("error")
  private Error error = null;
  @JsonProperty("num_records")
  private Integer numRecords = null;
  @JsonProperty("records")
  private List<Aggregate> records = null;

  public AggregateResponse error(Error error) {
    this.error = error;
    return this;
  }

   /**
   * Get error
   * @return error
  **/
  @ApiModelProperty(value = "")
  public Error getError() {
    return error;
  }

  public void setError(Error error) {
    this.error = error;
  }

  public AggregateResponse numRecords(Integer numRecords) {
    this.numRecords = numRecords;
    return this;
  }

   /**
   * Number of records
   * @return numRecords
  **/
  @ApiModelProperty(value = "Number of records")
  public Integer getNumRecords() {
    return numRecords;
  }

  public void setNumRecords(Integer numRecords) {
    this.numRecords = numRecords;
  }

  public AggregateResponse records(List<Aggregate> records) {
    this.records = records;
    return this;
  }

  public AggregateResponse addRecordsItem(Aggregate recordsItem) {
    if (this.records == null) {
      this.records = new ArrayList<Aggregate>();
    }
    this.records.add(recordsItem);
    return this;
  }

   /**
   * Get records
   * @return records
  **/
  @ApiModelProperty(value = "")
  public List<Aggregate> getRecords() {
    return records;
  }

  public void setRecords(List<Aggregate> records) {
    this.records = records;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AggregateResponse aggregateResponse = (AggregateResponse) o;
    return 
        Objects.equals(this.error, aggregateResponse.error) &&
        Objects.equals(this.numRecords, aggregateResponse.numRecords) &&
        Objects.equals(this.records, aggregateResponse.records);
  }

  @Override
  public int hashCode() {
    return Objects.hash(error, numRecords, records);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AggregateResponse {\n");
    
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    numRecords: ").append(toIndentedString(numRecords)).append("\n");
    sb.append("    records: ").append(toIndentedString(records)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

